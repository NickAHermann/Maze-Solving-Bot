//  ======== empty.c ========

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Swi.h>

/* TI-RTOS Header files */
#include <ti/drivers/GPIO.h>
// #include <ti/drivers/I2C.h>
// #include <ti/drivers/SDSPI.h>
// #include <ti/drivers/SPI.h>
// #include <ti/drivers/UART.h>
// #include <ti/drivers/Watchdog.h>
// #include <ti/drivers/WiFi.h>

/* Board Header file */
#include "Board.h"

// Program for the robot for ECE4437 Embedded Microcomputer System
// By: Ben Nelson, Abdul Asif, Nick H
// Spring 2018

//------------------------------------------
//BIOS Header Files
//-----------------Begin BIOS Files--------------- combine with above
#include <xdc/std.h>
#include <xdc/runtime/Log.h>
#include <xdc/cfg/global.h>
#include <xdc/runtime/Error.h>
#include <ti/sysbios/hal/Hwi.h>
// TivaWare Header Files
//-----------------Begin Header Files--------
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include "inc/hw_types.h"
//#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "inc/hw_ints.h"
#include "driverlib/interrupt.h"
#include "driverlib/timer.h"
#include "driverlib/pwm.h"
#include <time.h>
#include "driverlib/debug.h"
#include "driverlib/adc.h"
#include "driverlib/pin_map.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.c"

//PWM includes
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"

//----------------End Header Files------------

// Put the functions here
//-------------Begin Prototypes--------------
void hardware_init(void);
interrupt void Adjust_Motor(void);
interrupt void UTurn(void);
interrupt void Right_Turn(void);
//interrupt void Data_Get(void);
interrupt void inkjet(void);
//Timers
interrupt void Timer_Sub(void);
interrupt void gettin(void);
//-------------End Prototypes----------------

//Variables
//------------------Begin Variables------------------
uint32_t ADC0_Sequence1_Data[4];
uint32_t LightSensor[2];
volatile uint32_t Sensor_Frequency;
volatile uint32_t DistanceSide;
volatile uint32_t DistanceFront;
volatile uint32_t PWMFrequency;
volatile int32_t PWMDutyCycleA;
volatile int32_t PWMDutyCycleB;
volatile uint32_t DesiredDistance;
int32_t error[3];
int32_t front[3];
volatile int32_t errorINT;
volatile int32_t frontINT;
volatile uint32_t derivative;
int32_t ping[21];
int32_t pong[21];
uint32_t index;
uint32_t rally;
uint32_t triggered;
int32_t distance_error;
uint32_t i;
uint32_t take;
volatile uint32_t drac;
uint32_t nosf;
volatile uint32_t aluc;
uint32_t mark;
//extern Swi_Handle Link;
uint32_t stop;
uint32_t done;
uint32_t printing;
uint32_t no;

//-----------------------End Variables-----------------

// main()
//----------------------------------Begin main()-------------------------------
int main(void)
{
    hardware_init(); //initialize hardware
    DesiredDistance = 2300;//1800 plugged in changed to 2300 because broken?
    errorINT = 0;
    error[0] = 0;
    error[1] = 0;
    error[2] = 0;
    frontINT = 0;
    front[0] = 0;
    front[1] = 0;
    front[2] = 0;
    index = 0;
    rally = 2;
    take = 0;
    i = 0;
    triggered = 0;
    drac = 0;
    nosf = 0;
    aluc = 0;
    mark = 0;
    stop = 0;
    done = 0;
    printing = 0;
    no = 0;
    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
    PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true); //Enable A/B on
	//SysCtlDelay(SysCtlClockGet()/10);
    //Right_Turn();
    //UTurn();

    BIOS_start();
}
//------------------------------------------------End main()------------------------------------


// hardware_init()
// hardware initialization
//------------Begin hardware_init()----------
void hardware_init(void)
{
    //----------------------------------Hardware init------------------------------------
    //Setting system clock to 40MHz, PLL 400MHz /2/5 = 40MHz
    //SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
    //enable LED
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
    //------------------------------------------------------------------------------------

    //-------------------------------Uart and Bluetooth Init------------------------------------
    //enable GPIOB and UART1
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

    //set PB0 as RX, PB1 as TX, so connect bluetooth tx to PB0 and rx to PB1
    GPIOPinConfigure(GPIO_PB0_U1RX);
    GPIOPinConfigure(GPIO_PB1_U1TX);
    GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0|GPIO_PIN_1);

    //set Baudrate at 115200, 8-1-N
    UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 115200,
                (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));

    //Add for interrupts control in UART
    UARTFIFOEnable(UART1_BASE);
    //Enable UARTStdio for UART1
    UARTStdioConfig(1,115200,SysCtlClockGet());
    //-------------------------------------------------------------------------------------------

    //-------------------------------------ADC init-----------------------------------------
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCHardwareOversampleConfigure(ADC0_BASE, 4);
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0); //Setup to take data based w/o timer, add in when timer fixed
    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_CH0);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_CH1);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_CH0);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 3, ADC_CTL_CH1 | ADC_CTL_IE | ADC_CTL_END); //stop at array spot 4
    ADCSequenceEnable(ADC0_BASE, 1);

    //--------------------------------Light sensor init-----------------------------------------
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
	GPIOPinTypeGPIOInput(GPIO_PORTC_BASE, GPIO_PIN_6|GPIO_PIN_7);

    //------------------------------------Timer Setup---------------------------------------
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
    Sensor_Frequency = 20;//Sets sampling frequency to 20Hz or every 50 ms
    TimerLoadSet(TIMER0_BASE, TIMER_A, ((SysCtlClockGet()/Sensor_Frequency)-1));//loads frequency to clock register
    IntEnable(INT_TIMER0A);//this and next 2 lines allow clock to generate interrupt in cortex
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    IntMasterEnable();
    TimerEnable(TIMER0_BASE, TIMER_A);//starts timer
    //-----------------------------------------------------------------------------------------

    //----------------------------------------PWM init----------------------------------------
    //Enable A to PA6, Enable B to PA7
    PWMFrequency = 10000; //10kHz
    PWMDutyCycleA = 0;
    PWMDutyCycleB = 0;

    SysCtlPWMClockSet(SYSCTL_PWMDIV_1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    GPIOPinTypePWM(GPIO_PORTA_BASE, GPIO_PIN_6|GPIO_PIN_7);//PA6 PD0 match to motor 1, others to motor 2
    GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_1);
    GPIOPinConfigure(GPIO_PA6_M1PWM2);
    GPIOPinConfigure(GPIO_PA7_M1PWM3);
    GPIOPinConfigure(GPIO_PD0_M1PWM0);
    GPIOPinConfigure(GPIO_PD1_M1PWM1);

    PWMGenConfigure(PWM1_BASE,PWM_GEN_1,PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC);
    PWMGenPeriodSet(PWM1_BASE,PWM_GEN_1, SysCtlClockGet()/PWMFrequency - 1); //setting the frequency
    PWMGenConfigure(PWM1_BASE,PWM_GEN_0,PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC);//For PWM GEN 0
    PWMGenPeriodSet(PWM1_BASE,PWM_GEN_0, SysCtlClockGet()/PWMFrequency - 1); //setting the frequency
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_2, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleA/100); //setting duty cycle
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_3, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleB/100);
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleA/100); //setting duty cycle for second pwm
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleB/100);
    PWMOutputState(PWM1_BASE, PWM_OUT_2_BIT | PWM_OUT_3_BIT, false); //turn off pwm output
    PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, false); //turn off pwm output
    PWMGenEnable(PWM1_BASE, PWM_GEN_1);
    PWMGenEnable(PWM1_BASE, PWM_GEN_0);//enables second PWM for IN/IN
    //----------------------------------------------------------------------------------------*/
    //UARTprintf("\nHardware Setup\n\r");
}
//--------------------------------------End hardware_init--------------------------------------

//HWI_Functions
//Begin HWI Functions
/*interrupt void Data_Get(void)
{
	ADCIntClear(ADC0_BASE, 1); //Manually clears interrupt in ADC
	//Hwi_clearInterrupt(15);// 31 vector number, 15 interrupt number
	ADCProcessorTrigger(ADC0_BASE,1); //gives all clear for data collection
	while(!ADCIntStatus(ADC0_BASE,1,false)){}
	ADCSequenceDataGet(ADC0_BASE, 1, ADC0_Sequence1_Data);//tells it to collect data and where to store results
	error[2] = error[1];//sets up the PID control variables
	error[1] = error[0];
	error[0] = ADC0_Sequence1_Data[1]-DesiredDistance;
	errorINT = (error[0] + error[1] + error[2])*.05;
	derivative = (error[0]-error[1])/.05;
	UARTprintf("\nerror[0] is %d\n\r",error[0]);
	UARTprintf("\nLight sensor 1 is %d\n\r",ADC0_Sequence1_Data[2]);
	UARTprintf("\nLight sensor 2 is %d\n\r",ADC0_Sequence1_Data[3]);
}*/

interrupt void Timer_Sub(void)
{
	// Clear the timer interrupt
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

	//only here cause data get doesn't work
	ADCIntClear(ADC0_BASE, 1); //Manually clears interrupt in ADC
	ADCProcessorTrigger(ADC0_BASE,1); //gives all clear for data collection
	while(!ADCIntStatus(ADC0_BASE,1,false)){}
	ADCSequenceDataGet(ADC0_BASE, 1, ADC0_Sequence1_Data);//tells it to collect data and where to store results

	error[2] = error[1];//sets up the PID control variables
	error[1] = error[0];
	error[0] = ADC0_Sequence1_Data[1]-DesiredDistance;
	errorINT = (error[0] + error[1] + error[2])*.05;
	derivative = (error[0]-error[1])/.05;
	distance_error = (abs(error[0]))/((4000-500)/(20-3));
	front[2] = front[1];
	front[1] = front[0];
	front[0] = ADC0_Sequence1_Data[0];
	frontINT = (front[0]+front[1]+front[2])/3;
	//UARTprintf("\nfrontINT distance read is %d\n\r",frontINT);
	//UARTprintf("\nerror[0] is %d\n\r",error[0]);
	//UARTprintf("\nfront distance read is %d\n\r",ADC0_Sequence1_Data[0]);
	//UARTprintf("\nerrorINT is %d\n\r", errorINT);
//ping pong buffers
	if(triggered)
	{
		take++;
		if(take >= 2)
		{
			take = 0;
			if(rally == 1)
			{
				if(index<20)
				{
					ping[index] = distance_error;
					index++;
				}
				else
				{
					ping[index] = distance_error;
					index = 0;
					rally = 0;
					Swi_post(Link);
				}
			}
			else if(rally == 0)
			{
				if(index<20)
				{
					pong[index] = distance_error;
					index++;
				}
				else
				{
					pong[index] = distance_error;
					index = 0;
					rally = 1;
					Swi_post(Link);
				}
			}
			else
			{
				if(index<20)
				{
					ping[index] = distance_error;
					index++;
				}
				else
				{
					ping[index] = distance_error;
					index = 0;
					rally = 0;
					Swi_post(Link);
				}
			}
		}
	}
	if(!stop)
	{
		if(errorINT < -125)
		{
			Swi_post(Right);
			//Right_Turn();
		}
		else if(frontINT > 2700)//was 2300, now 3500
		{
			//UARTprintf("\nfrontINT distance read is %d\n\r",frontINT);
			Swi_post(Ewey);
			//UTurn();
		}
		else
		{
			Swi_post(Forward);
			//Adjust_Motor();
		}
	}
}

interrupt void gettin(void)
{
	//UARTprintf("\nhello\n\r");
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_6|GPIO_PIN_7);
	GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_6|GPIO_PIN_7, 192);
	SysCtlDelay(SysCtlClockGet()/30000);
	GPIOPinTypeGPIOInput(GPIO_PORTC_BASE, GPIO_PIN_6|GPIO_PIN_7);
	//UARTprintf("\nBefore\n\r");
	while(GPIOPinRead(GPIO_PORTC_BASE, GPIO_PIN_6) >= 2)
	{
		drac++;
	}
	if(drac > 400)
	{
		aluc++;
		//UARTprintf("\nDrac = %d\n\r",drac);
		//UARTprintf("increase");
	}
	else if(aluc != 0)
	{
		//UARTprintf("\nHighs = %d\n\r",aluc);
		done = aluc;
		aluc = 0;
	}
	//aluc = drac;
	//nosf = aluc;
	/*PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);// here because it stops when it gets here
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);*/
	if(done >= 45)
	{
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 50);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 50);
		PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, false);
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);//turn off red light
		//SysCtlDelay(SysCtlClockGet()/10);
		stop = 1;
		if(!printing && !no)
		{
			printing = 1;
			no = 1;
			Swi_post(Link);
		}
	}
	else if((done >= 20) && (triggered == 0))
	{
		triggered = 1;
		//UARTprintf("\nDetected First\n\r");
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 2);// turn on red light
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);
		done = 0;
	}
	else if((done >= 20) && (triggered == 1))
	{
		triggered = 0;
		Swi_post(Link);
		//UARTprintf("\nDetected Second\n\r");
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);//turn off red light
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);
		done = 0;
	}
	//UARTprintf("\nLight Sensor 1 is %d\n\r",drac);
	drac = 0;
}
//Timer Interrupt Handler and Distance Creation
//
//------------------------------------Begin Swi Functions-------------------------------------
interrupt void inkjet(void)
{
	if(triggered)
	{
		if(!rally)
		{
			for(i = 0; i <=20; i++)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8);
				//UARTprintf("\nping %d\n\r",i);
				UARTprintf("%d The ping errors collected are\n",ping[i]);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 2);
			}
		}
		else
		{
			for(i = 0; i <=20; i++)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8);
				//UARTprintf("\npong %d\n\r",i);
				UARTprintf("%d The pong errors collected are\n",pong[i]);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 2);
			}
		}
	}
	else
	{
		if(rally)
		{
			for(i = 0; i < index; i++)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8);
				//UARTprintf("\nping %d\n\r",i);
				UARTprintf("%d The ping errors collected are\n",ping[i]);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
			}
		}
		else
		{
			for(i = 0; i < index; i++)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8);
				//UARTprintf("\npong %d\n\r",i);
				UARTprintf("%d The pong errors collected are\n",pong[i]);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
			}
		}
	}
	if(printing)
	{
		printing = 0;
		if(rally)
		{
			for(i = 0; i < index; i++)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8);
				//UARTprintf("\nping %d\n\r",i);
				UARTprintf("%d The ping errors collected are\n",ping[i]);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
			}
		}
		else
		{
			for(i = 0; i < index; i++)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8);
				//UARTprintf("\npong %d\n\r",i);
				UARTprintf("%d The pong errors collected are\n",pong[i]);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
			}
		}
	}
}



interrupt void Adjust_Motor(void)
{
	//UARTprintf("\nforward is %d\n\r");
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);//turn back on for actual program, off for calibration
	if(error[0] > 0) //too close
	{
		PWMDutyCycleB = 4000 - (.5*error[0]+.35*errorINT+.05*derivative);//the higher the error the faster it turns back
		//UARTprintf("\nDutyB is %d\n\r",PWMDutyCycleB);
		if((3400 <= PWMDutyCycleB) && (PWMDutyCycleB <= 4000))
		{
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, PWMDutyCycleB);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
		}
		else if(PWMDutyCycleB > 4000)
		{
			PWMDutyCycleB = 4000;
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, PWMDutyCycleB);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		}
		else
		{
			PWMDutyCycleB = 3400;
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, PWMDutyCycleB);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
		}
	}
	else if(error[0] < 0)//too far
	{
		PWMDutyCycleA = 4000 + (.8*error[0]+.6*errorINT+.1*derivative);
		//UARTprintf("\nThe duty cycle A is %d\n\r", PWMDutyCycleA);
		if((3400 <= PWMDutyCycleA) && (PWMDutyCycleA <= 4000))
		{
			//PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleA/100);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, PWMDutyCycleA);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		}
		else if(PWMDutyCycleA > 4000)
		{
			PWMDutyCycleA = 4000;
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, PWMDutyCycleA);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		}
		else
		{
			PWMDutyCycleA = 3400;
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, PWMDutyCycleA);
			PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		}
	}
	else
	{
		PWMDutyCycleA = 0;
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleA/100);
		PWMDutyCycleB = 0;
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, (SysCtlClockGet()/PWMFrequency) * PWMDutyCycleB/100);
	}
}

interrupt void UTurn(void)
{
	//UARTprintf("\nuturn\n\r");
	mark = 0;
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, false);
	PWMOutputState(PWM1_BASE, PWM_OUT_1_BIT | PWM_OUT_2_BIT, true);
	while((ADC0_Sequence1_Data[0] > 1400) && (mark != 2))// was greater than 1200, now 200
	{
		if((error[0] < -500) && (!mark))
		{
			mark = 1;
		}
		else if((error[0] > -500) && mark)
		{
			mark = 2;
		}
	}
	PWMOutputState(PWM1_BASE, PWM_OUT_1_BIT, false);
	PWMOutputState(PWM1_BASE, PWM_OUT_2_BIT, false);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_3_BIT, true);
	SysCtlDelay(SysCtlClockGet()/200);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_3_BIT, false);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);//turn back on for actual program, off for calibration
}

interrupt void Right_Turn(void)
{
	//UARTprintf("\nright is\n\r");
	PWMOutputState(PWM1_BASE, PWM_OUT_2_BIT, false);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 1700);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);
	while(errorINT < -55)
	{
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 1800);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
		SysCtlDelay(SysCtlClockGet()/10000);
	}
	//UARTprintf("\nright finish\n\r");
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, 0);
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_1, 0);
	PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT, true);//turn back on for actual program, off for calibration
}

//------------------------------------End Swi Function---------------------------------------
